#import "../fa2/fa2.mligo" "FA2"
#import "../src/contract.mligo" "Main"
#import "../src/parameter.mligo" "P"

import Types = P.Types

const assert_error = (res: test_exec_result, expected_error: string): unit => {
    const expected_error2 = Test.eval(expected_error);
    return match(res) {
        when(Fail(x)):
          match (x) {
            when(Rejected(x)): assert(Test.michelson_equal(x[0], expected_error2));
            when(Balance_too_low(_)):failwith("contract failed: balance too low");
            when(Other(s)): failwith(s);
          };
        when(Success(_)): failwith("Expected to fail but passed");
    };
};

const x = Test.reset_state (7 as nat, list([30000000 as tez]) as list <tez>);
const alice: address = Test.nth_bootstrap_account(1);
const bob: address = Test.nth_bootstrap_account(2);
const charly: address = Test.nth_bootstrap_account(3);
const delta: address = Test.nth_bootstrap_account(4);
const echo: address = Test.nth_bootstrap_account(5);
const unknown = Test.nth_bootstrap_account(6);
const signers: set<address> = Set.add(
    alice,
    Set.add(
        bob,
        Set.add(
            charly,
            Set.add(
                delta,
                Set.add(
                    echo,
                    Set.empty as set<address>
                )
            )
        )
    )
);
const threshold: nat = 3 as nat;
const proposal_map: big_map<nat, Main.Storage.Types.proposal> = Big_map.empty;
const proposal_counter: nat = 0 as nat;
const metadata_initial: big_map<string, bytes> = Big_map.empty;

const storage: Main.Storage.Types.t = ({
    signers: signers,
    threshold: threshold,
    proposal_map: proposal_map,
    proposal_counter: proposal_counter,
    metadata: metadata_initial
});

const atomic: FA2.atomic_trans = {
        to_: bob,
        token_id: 1 as nat
    };

const transfer_from: FA2.transfer_from = {
    from_: alice,
    tx: list([atomic]) as list<FA2.atomic_trans>
};

const transfers: FA2.transfer = list([transfer_from]) as FA2.transfer;

const create_proposal_params: Main.Parameter.Types.proposal_params = {
    target_fa2: bob as address,
    transfers: transfers
};
//_ = Test.log("here");


const test_signer_creates_proposal_works = do {
    const orig = Test.originate(contract_of(Main), storage, 0 as tez);
    Test.set_source(alice);

    const expected_proposal: Main.Storage.Types.proposal = {
        approved_signers: Set.add(alice, Set.empty as set<address>),
        executed: false,
        number_of_signer: 1 as nat,
        target_fa2: bob as address,
        transfers:transfers,
        timestamp: 0 as timestamp
    };
    const _gas_used: nat = Test.transfer_exn(orig.addr, Create_proposal(create_proposal_params), 0 as mutez);
    Test.log(_gas_used);
    const end_storage = Test.get_storage(orig.addr);
    const end_proposal: Main.Storage.Types.proposal = match(Big_map.find_opt(1 as nat, end_storage.proposal_map)) {
        when(Some(op)): op;
        when(None): failwith(Main.Conditions.Errors.no_proposal_exist);
    };
    const final_proposal: Main.Storage.Types.proposal = {
        ...end_proposal,
        timestamp: (0 as timestamp)
    };
    assert(final_proposal == expected_proposal);
};

const test_unknown_creates_proposal_fails = do {
    const orig = Test.originate(contract_of(Main), storage, 0 as tez);
    Test.set_source(unknown);
    const fail_tx = Test.transfer(orig.addr, Create_proposal(create_proposal_params), 0 as tez);
    assert_error(fail_tx, Main.Conditions.Errors.only_signer);
    const curr_storage = Test.get_storage(orig.addr);
    assert(curr_storage == storage);
};



const test_signer_signs_proposal_works = do {
    const init_proposal: Main.Storage.Types.proposal = {
        approved_signers: Set.add(alice, Set.empty as set<address>),
        executed: false,
        number_of_signer: 1 as nat,
        target_fa2: bob as address,
        transfers: transfers,
        timestamp: 5 as timestamp,
    };

    const orig = Test.originate(contract_of(Main), {
        ...storage, proposal_map: Big_map.literal(list([
        [1 as nat, init_proposal]
    ]))}
    , 0 as tez);
    Test.set_source(bob);
    const _gas_used: nat = Test.transfer_exn(orig.addr, (Sign_proposal(1 as nat) as parameter_of Main), 0 as tez);
    const curr_storage = Test.get_storage(orig.addr);
    const end_signed_proposal = match(Big_map.find_opt(1 as nat, curr_storage.proposal_map)) {
        when(Some(op)): op;
        when(None): failwith(Main.Conditions.Errors.no_proposal_exist);
    };
    const expected_signer: set<address> = Set.add(
        bob,
        Set.add(
            alice,
            Set.empty as set<address>
        )
    );
    assert(end_signed_proposal.approved_signers == expected_signer);
};


const test_unknown_signs_proposal_fails = do {
    const orig = Test.originate(contract_of(Main), storage, 0 as tez);
    Test.set_source(unknown);
    const fail_tx = Test.transfer(orig.addr, (Sign_proposal(1 as nat) as parameter_of Main), 0 as tez);
    assert_error(fail_tx, Main.Conditions.Errors.only_signer);
    const curr_storage = Test.get_storage(orig.addr);
    assert(curr_storage == storage);
};



const test_unknown_signs_unknown_proposal_fails = do {
    const orig = Test.originate(contract_of(Main), storage, 0 as tez);
    Test.set_source(unknown);
    const fail_sign_tx = Test.transfer(orig.addr, (Sign_proposal(2 as nat) as parameter_of Main), 0 as tez);
    assert_error(fail_sign_tx, Main.Conditions.Errors.only_signer);
};


const test_signer_signs_unknown_proposal_fails = do {
    const orig = Test.originate(contract_of(Main), storage, 0 as tez);
    Test.set_source(alice);
    const fail_sign_tx = Test.transfer(orig.addr, (Sign_proposal(2 as nat) as parameter_of Main), 0 as tez);
    assert_error(fail_sign_tx, Main.Conditions.Errors.no_proposal_exist);
};



const signer_creates_proposal_signers_sign_proposal_execute_works = do {
    Test.set_source(alice);
    const orig = Test.originate(contract_of(Main), storage, 0 as tez);
    const addr = Test.to_address(orig.addr);

    const ledger: FA2.Ledger.t = Big_map.literal(list([
        [1 as nat, alice],
        [2 as nat, bob],
        [3 as nat, charly]
    ]));

    const token_info = Map.empty as map<string, bytes>;
    const token_metadata = Big_map.literal(list([
        [1 as nat, {token_id:1 as nat, token_info: token_info}],
        [3 as nat, {token_id:3 as nat, token_info: token_info}],
        [2 as nat, {token_id:2 as nat, token_info: token_info}]
    ])) as FA2.TokenMetadata.t;

    const operators: FA2.Operators.t = Big_map.literal(list([
        [[alice, addr], Set.add(1 as nat, Set.empty as set<nat>)]
    ])) as FA2.Operators.t;

    const storage_fa2 = {
        ledger         : ledger,
        token_metadata : token_metadata,
        operators      : operators
    };

    const orig_fa2 = Test.originate(contract_of(FA2), storage_fa2, 0 as tez);
    const addr_fa2 = Test.to_address(orig_fa2.addr);
    const params: Main.Parameter.Types.proposal_params = {...create_proposal_params, target_fa2: addr_fa2};
    let _gas_used: nat = Test.transfer_exn(orig.addr, Create_proposal(params), 0 as mutez);



    Test.set_source(bob);
    _gas_used = Test.transfer_exn(orig.addr, (Sign_proposal(1 as nat) as parameter_of Main), 0 as tez);
    Test.set_source(charly);
    _gas_used = Test.transfer_exn(orig.addr, (Sign_proposal(1 as nat) as parameter_of Main), 0 as tez);

    const expected_executed_signers = Set.add(
        alice,
        Set.add(
            bob,
            Set.add(
                charly,
                Set.empty as set<address>
            )
        )
    );

    const curr_storage = Test.get_storage(orig.addr);
    const end_executed_proposal = match(Big_map.find_opt(1 as nat, curr_storage.proposal_map)) {
        when(Some(op)): op;
        when(None): failwith(Main.Conditions.Errors.no_proposal_exist);
    };

    assert(end_executed_proposal.executed);
    assert(end_executed_proposal.approved_signers == expected_executed_signers);
    const curr_fa2_storage = Test.get_storage(orig_fa2.addr);
    const owner: address = match(Big_map.find_opt(1 as nat, curr_fa2_storage.ledger)) {
        when(Some(val)): val;
        when(None): failwith(FA2.Errors.undefined_token);
    };
    assert(owner == bob);
};


const signer_creates_proposal_signers_sign_proposal_execute_over_threshold_works = do {
    Test.set_source(alice);
    const storage_init = {...storage, threshold: 1 as nat};
    const orig = Test.originate(contract_of(Main), storage_init, 0 as tez);
    const addr: address = Test.to_address(orig.addr);

    const ledger: FA2.Ledger.t = Big_map.literal(list([
        [1 as nat, alice],
        [2 as nat, bob],
        [3 as nat, charly]
    ]));

    const token_info = Map.empty as map<string, bytes>;
    const token_metadata = Big_map.literal(list([
        [1 as nat, {token_id:1 as nat, token_info: token_info}],
        [2 as nat, {token_id:2 as nat, token_info: token_info}],
        [3 as nat, {token_id:3 as nat, token_info: token_info}]
    ])) as FA2.TokenMetadata.t;

    const operators: FA2.Operators.t = Big_map.literal(list([
        [[alice, addr], Set.add(1 as nat, Set.empty as set<nat>)]
    ])) as FA2.Operators.t;

    const storage_fa2 = {
        ledger         : ledger,
        token_metadata : token_metadata,
        operators      : operators
    };

    const orig_fa2 = Test.originate(contract_of(FA2), storage_fa2, 0 as tez);
    const addr_fa2 = Test.to_address(orig_fa2.addr);
    const params: Main.Parameter.Types.proposal_params = {...create_proposal_params, target_fa2: addr_fa2};
    let _gas_used: nat = Test.transfer_exn(orig.addr, Create_proposal(params), 0 as mutez);



    Test.set_source(bob);
    _gas_used = Test.transfer_exn(orig.addr, (Sign_proposal(1 as nat) as parameter_of Main), 0 as tez);

    const expected_executed_signers = Set.add(
        alice,
        Set.add(
            bob,
            Set.empty as set<address>
        )
    );

    const curr_storage = Test.get_storage(orig.addr);
    Test.log(curr_storage);
    const end_executed_proposal = match(Big_map.find_opt(1 as nat, curr_storage.proposal_map)) {
        when(Some(op)): op;
        when(None): failwith(Main.Conditions.Errors.no_proposal_exist);
    };

    assert(end_executed_proposal.executed);
    assert(end_executed_proposal.approved_signers == expected_executed_signers);
    const curr_fa2_storage = Test.get_storage(orig_fa2.addr);
    const owner: address = match(Big_map.find_opt(1 as nat, curr_fa2_storage.ledger)) {
        when(Some(val)): val;
        when(None): failwith(FA2.Errors.undefined_token);
    };
    assert(owner == bob);
};
